name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [event-service, user-service, notification-service]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      if: matrix.service == 'event-service'
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Set up Node.js
      if: matrix.service == 'user-service'
      uses: actions/setup-node@v2
      with:
        node-version: '16'
    
    - name: Set up Go
      if: matrix.service == 'notification-service'
      uses: actions/setup-go@v2
      with:
        go-version: '1.20'
    
    - name: Install dependencies
      working-directory: services/${{ matrix.service }}
      run: |
        if [ "${{ matrix.service }}" == "event-service" ]; then
          pip install -r requirements.txt
        elif [ "${{ matrix.service }}" == "user-service" ]; then
          npm install
        elif [ "${{ matrix.service }}" == "notification-service" ]; then
          go mod download
        fi
    
    - name: Run tests
      working-directory: services/${{ matrix.service }}
      run: |
        if [ "${{ matrix.service }}" == "event-service" ]; then
          pytest test_app.py -v
        elif [ "${{ matrix.service }}" == "user-service" ]; then
          npm test
        elif [ "${{ matrix.service }}" == "notification-service" ]; then
          go test -v ./...
        fi

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [event-service, user-service, notification-service]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: services/${{ matrix.service }}
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ matrix.service }}:latest
          ${{ env.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/${{ matrix.service }}:latest
        cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml
    
    - name: Update Kubernetes deployments
      run: |
        for service in event-service user-service notification-service; do
          # Update image in deployment
          kubectl set image deployment/$service $service=${{ env.DOCKER_USERNAME }}/$service:${{ github.sha }}
          # Wait for rollout to complete
          kubectl rollout status deployment/$service
        done
